    input();
    vector <city> county;
    cout << "Do you want to allow migrations or not? [y/n]" << endl;
    char answer;
    cin >> answer;
    if (answer == 'y' ) { 
        borders = "open";
        for(auto i =0; i<nr_cities; i++) { //TENUTO COME PROVA, PI DA RIMUOVERE E LASCIARE SOLO IL LOAD CITIES SOTTO
            theta = rnd.Rannyu (0, 2*M_PI);
            county.push_back(city(cos(theta), sin(theta))); 
        }
    }else if (answer == 's') { 
        borders = "close";
        }
    } else {
        cout << "Input, not valid. Try again!" << endl;
        return 1;
    }

    american_capitals.open("American_capitals.dat");
    list_of_capitals.open("list_of_capitals.dat");
    vector <string> list_capitals;

    if(american_capitals.is_open()){
        for(int i = 0; i<nr_cities; i++){
            american_capitals >> x >> y;
            county.push_back(x, y);
        }
    }else{
        cout << "Unable to read American_capitals.dat" << endl; 
        exit(1);
    }
    if(list_of_capitals.is_open()){
        for(int i = 0; i<nr_cities; i++){
            list_of_capitals >> temporary;
            list_capitals.push_back(temporary);
        }
    }else{
        cout << "Unable to read list_of_capitals.dat" << endl; 
        exit(1);
    }
    chromosome_number_string = to_string(nr_chromosomes);
    declaration();

    //int size, rank;
    //MPI_Init(&argc,&argv);
    //MPI_Comm_size(MPI_COMM_WORLD, &size);
    //MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    //MPI_Status stat;
    //rnd.SetPrimesCouple(rank); //ogni nodo viene settato su una coppia di numeri primi diversi
